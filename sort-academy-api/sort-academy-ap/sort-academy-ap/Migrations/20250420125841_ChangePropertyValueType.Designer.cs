// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sort_academy_api.Data;

#nullable disable

namespace sort_academy_ap.Migrations
{
    [DbContext(typeof(SortAcademyDbContext))]
    [Migration("20250420125841_ChangePropertyValueType")]
    partial class ChangePropertyValueType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sort_academy_api.Data.Models.Sorting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sortings");
                });

            modelBuilder.Entity("sort_academy_api.Data.Models.SortingProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SortingProperties");
                });

            modelBuilder.Entity("sort_academy_api.Data.Models.SortingSortingProperty", b =>
                {
                    b.Property<int>("SortingId")
                        .HasColumnType("int");

                    b.Property<int>("SortingPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("SortingId", "SortingPropertyId");

                    b.HasIndex("SortingPropertyId");

                    b.ToTable("SortingSortingProperty");
                });

            modelBuilder.Entity("sort_academy_api.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("sort_academy_api.Data.Models.SortingSortingProperty", b =>
                {
                    b.HasOne("sort_academy_api.Data.Models.Sorting", "Sorting")
                        .WithMany("SortingSortingProperty")
                        .HasForeignKey("SortingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sort_academy_api.Data.Models.SortingProperty", "SortingProperty")
                        .WithMany("SortingSortingProperty")
                        .HasForeignKey("SortingPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sorting");

                    b.Navigation("SortingProperty");
                });

            modelBuilder.Entity("sort_academy_api.Data.Models.Sorting", b =>
                {
                    b.Navigation("SortingSortingProperty");
                });

            modelBuilder.Entity("sort_academy_api.Data.Models.SortingProperty", b =>
                {
                    b.Navigation("SortingSortingProperty");
                });
#pragma warning restore 612, 618
        }
    }
}
