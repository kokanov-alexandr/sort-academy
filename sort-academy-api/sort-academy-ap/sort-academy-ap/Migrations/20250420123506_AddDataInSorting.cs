using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace sort_academy_ap.Migrations
{
    /// <inheritdoc />
    public partial class AddDataInSorting : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.InsertData(
                table: "Sortings",
                columns: ["Name", "DisplayName", "Description"],
                values: new [,] 
                {
                    { "bubble-sort", "Сортировка пузырьком", "Простой и интуитивный алгоритм, часто используемый для учебных целей. Напоминает процесс \"всплытия\" пузырьков в воде, где большие элементы \"всплывают\" к концу массива, а маленькие \"тонут\" к началу."},
                    { "shaker-sort", "Шейкерная сортировка", "Улучшенная версия пузырьковой сортировки, которая проходит по списку в обоих направлениях, смещая большие элементы вправо и маленькие влево."},
                    { "quick-sort", "Быстрая сортировка", "Популярный и эффективный алгоритм. Работает по принципу \"разделяй и властвуй\", рекурсивно разбивая массив на две части относительно опорного элемента (pivot) и сортируя две части отдельно."},
                    { "selection-sort", "Сортировка выбором", "Последовательно выбирает наименьший элемент из неотсортированной части массива и перемещает его в начало. Особенность метода в том, что он делает минимальное количество обменов элементов."},
                    { "insertion-sort", "Сортировка вставками", "Строит отсортированную последовательность, вставляя каждый новый элемент в свою позицию в уже отсортированной части массива. На каждом шаге он берет следующий элемент и вставляет его на нужное место среди ранее отсортированных, сдвигая элементы вправо."},
                    { "gnome-sort", "Гномья сортировка", "Напоминающий движение гнома по саду. Гном последовательно сравнивает текущий элемент с предыдущим и, если они в неправильном порядке, меняет их местами, затем отступает на шаг назад и повторяет процесс."},
                    { "shell-sort", "Сортировка Шелла", "Улучшенный вариант сортировки вставками, который использует последовательность шагов. На первых этапах сортировки интервал (шаг) большой, затем постепенно уменьшается до 1."},
                    { "heap-sort", "Сортировка кучей", "Использует структуру данных куча. Вначале формируется куча из элементов массива, затем происходит сортировка: извлекается максимальный элемент (для сортировки по возрастанию), и куча перестраивается."},
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
